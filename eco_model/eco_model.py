# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EcoModel
                                 A QGIS plugin
 Plugin to model economic consequences of climate changes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Bo Victor Thomsen - AestasGIS Denmark
        email                : bvt@aestas.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys

from qgis.PyQt.QtCore import (QSettings,
                              QTranslator,
                              QCoreApplication,
                              Qt,
                              QUrl,
                              QDateTime)
                          
from qgis.PyQt.QtGui import QIcon

from qgis.PyQt.QtWidgets import (QDialog,
                                 QAction,
                                 QMenu,
                                 QWidget,
                                 QTreeView,
                                 QAbstractItemView,
                                 QDialogButtonBox,
                                 QLineEdit,
                                 QTextEdit,
                                 QSpinBox,
                                 QDoubleSpinBox,
                                 QLayout,
                                 QVBoxLayout)

from qgis.PyQt.Qt import (QStandardItemModel,
                          QStandardItem)

from qgis.PyQt.QtSql import (QSqlDatabase, QSqlQuery)
                          
from qgis.core import (QgsProject,
                       QgsProviderRegistry,
                       QgsDataSourceUri,
                       QgsVectorLayer)

from qgis.gui import QgsFileWidget, QgsCheckableComboBox

from .resources import *

from .helper import (tr,
                     trInit,
                     logI,
                     logW,
                     logC,
                     messI,
                     messW,
                     messC,
                     read_config,
                     write_config,
                     handleRequest,
                     mapperExtent,
                     createDateTimeName,
                     loadLayer,
                     createGroup,
                     addLayer2Tree,
                     createMemLayer,
                     createRequestLog,
                     copyLayer2Layer,
                     findLayerVariableValue,
                     evalLayerVariable,
                     zoomToFeature)

from .eco_model_dockwidget import EcoModelDockWidget

import os.path

class EcoModel:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EcoModel_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            translator = QTranslator()
            translator.load(locale_path)
            QCoreApplication.installTranslator(translator)

        trInit('EcoModel')


        # Declare instance attributes
        self.actions = []
        self.menu = tr(u'&Climate modeliing')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'EcoModel')
        self.toolbar.setObjectName(u'EcoModel')

        #print "** INITIALIZING EcoModel"

        self.pluginIsActive = False
        self.dockwidget = None


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/eco_model/icon.png'
        self.add_action(
            icon_path,
            text=tr(u'Economic modelling'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING EcoModel"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD EcoModel"

        for action in self.actions:
            self.iface.removePluginMenu(
                tr(u'&Climate modeliing'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget == None:

                self.dockwidget = EcoModelDockWidget()

                self.model = QStandardItemModel()
                self.model.setHorizontalHeaderLabels(['Name', 'Height', 'Weight'])
                self.parm = read_config(os.path.join(self.plugin_dir, 'configuration.json'))

                sd = self.dockwidget

                sd.pbDatabase.clicked.connect(self.pbDatabaseClicked)
                sd.pbParameterSave.clicked.connect(self.pbParameterSaveClicked)
                sd.pbParameterReset.clicked.connect(self.pbParameterResetClicked)
                sd.pbModelRun.clicked.connect(self.pbModelRunClicked)
                
                sd.tvGeneral.setEditTriggers(QAbstractItemView.NoEditTriggers)
                sd.tvGeneral.setSelectionBehavior(QAbstractItemView.SelectRows)
                sd.tvGeneral.setSelectionMode(QAbstractItemView.ExtendedSelection)
                sd.tvGeneral.doubleClicked.connect(self.tvGeneralClicked)



                self.parm = read_config(os.path.join(self.plugin_dir, 'configuration.json'))
                self.pbDatabaseClicked()
                self.pbParameterResetClicked()
                
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def pbDatabaseClicked(self):

        sd = self.dockwidget
        spd = self.parm["Data"]

        sd.cbDatabase.clear()

        for k in QgsProviderRegistry.instance().providerList():
        
            metadata = QgsProviderRegistry.instance().providerMetadata(k)

            try:
                logI('Testing connection type: {}'.format(k))
                conn = metadata.connections()
                for c,i in conn.items(): sd.cbDatabase.addItem('{}: {}'.format(k, c), [k, c])

            except Exception as e:
                logC('Error using connection type: {}'.format(k))
                
        sd.cbDatabase.setCurrentIndex(sd.cbDatabase.findText(spd['Database']))
        sd.leParameterTable.setText(spd['Parametertable'])        
        sd.leParameterSQL.setText(spd['ParameterSQL'])        
        sd.chbParameter.setChecked(spd['Load as layer'])        
        
    def pbParameterSaveClicked(self):

        sd = self.dockwidget

    def pbParameterResetClicked(self):

        sd = self.dockwidget
        
        if sd.cbDatabase.currentIndex() >= 0 and sd.leParameterTable.text() != '':
            setting = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
            metadata = QgsProviderRegistry.instance().providerMetadata(setting[0])
            logI(setting[0])
            self.connection = metadata.findConnection(setting[1])
            uri = QgsDataSourceUri(self.connection.uri())
            self.contype = setting[0]
            self.conuri = uri
            
            if sd.leParameterTable.text().find('.') >= 0:
                sandt = sd.leParameterTable.text().split('.',1)
                uri.setSchema(sandt[0])
                uri.setTable(sandt[1])
            else:
                uri.setTable(sd.leParameterTable.text())

            if sd.chbParameter.isChecked():
                self.parameterLayer = QgsVectorLayer(uri.uri(), "parameters", setting[0])
                QgsProject.instance().addMapLayer(self.parameterLayer)

            cnvDict = {'ogr':'QSPATIALITE','spatialite':'QSPATIALITE','postgres':'QPSQL','mssql':'QODBC'} # , 'oracle':'QOCI', 'sqlite':'QSQLITE'}

            db = QSqlDatabase.addDatabase(cnvDict[setting[0]]);
            db.setHostName(uri.host())
            db.setDatabaseName(uri.database())
            db.setPort(int(uri.port()))
            db.setUserName(uri.username())
            db.setPassword(uri.password())
            db.open()
        
            self.parmDict, hl = self.createParmDict(sd.leParameterSQL.text(),0)        

            
#            sd.tvGeneral.header().setDefaultSectionSize(80)
#            sd.tvData.header().setDefaultSectionSize(80)
#            sd.tvQueries.header().setDefaultSectionSize(80)
#            sd.tvModels.header().setDefaultSectionSize(80)
#            sd.tvReports.header().setDefaultSectionSize(80)
 
            (modG, modD, modQ, modM, modR) = self.createTreeModels (QStandardItemModel(), QStandardItemModel(), QStandardItemModel(), QStandardItemModel(), QStandardItemModel(), self.parmDict, 'name', 'parent', hl)
        
            sd.tvGeneral.setModel(modG)
            sd.tvData.setModel(modD)
            sd.tvQueries.setModel(modQ)
            sd.tvModels.setModel(modM)
            sd.tvReports.setModel(modR)

            for tv in [sd.tvGeneral, sd.tvData, sd.tvQueries, sd.tvModels, sd.tvReports]:
                tv.header().setDefaultSectionSize(120)
                for i in [1, 3, 4, 5, 6, 7, 9, 10]: tv.hideColumn(i)

        
            sd.tvGeneral.expandAll()
            sd.tvData.expandAll()
            sd.tvQueries.expandAll()
            sd.tvModels.expandAll()
            sd.tvReports.expandAll()
        
        else:
            messC(tr('Database connection and/or parametertable not set'))
            
    def pbModelRunClicked(self):

        sd = self.dockwidget

        mDict = self.createTempParmDict([[sd.tvGeneral.model().invisibleRootItem().child(0,0), False], [sd.tvQueries.model().invisibleRootItem().child(0,0), False], [sd.tvData.model().invisibleRootItem().child(0,0), True]])
        logI(str(mDict))
        root = sd.tvModels.model().invisibleRootItem()
        for item in self.iterItemsChecked(root.child(0,0)):
            self.runModel(item, mDict)

    def runModel (self, item, mDict):
    
        sd = self.dockwidget
        
        mDict2 = self.createTempParmDict([[item, True]])
        lDict = {**mDict, **mDict2}

        # Find query
        parent = item.parent()
        lTxt = parent.child(0,2).text()
        qTxt = lDict[lTxt]
        
        lDict['result_geom'] = 'geom_byg'
        lDict['result_pkid'] = 'fid'
        lDict['tablename_ts'] = createDateTimeName(item.text())
        lDict['sqlquery'] = qTxt.format(**lDict)
        qct = lDict['Create_table'].format(**lDict)
        logI(qct)
        query = QSqlQuery() # First create query instance.
        query.exec(qct)

        contype = self.contype
        uri = self.conuri
        uri.setDataSource(lDict['Result_schema'], lDict['tablename_ts'], lDict['result_geom'])#, '', lDict['result_pkid'])
        vlayer=QgsVectorLayer (uri .uri(), lDict['tablename_ts'], contype)
        QgsProject.instance().addMapLayer(vlayer)

        
        # run create table command 

        #Find create primary key index  command
        # Substitute placeholders in command
        # Run command
        
        # Find create index geometry command
        # Substitute placeholders in command
        # Run command

        # Connect to created table an show it in mapper window
        
    def createTempParmDict (self, roots):

        tDict = {}    
        for r in roots:
            r0 = r[0]
            r1 = r[1]            
            for row in range(r0.rowCount()):
                key   = r0.child(row, 0).text()
                value = r0.child(row, 2).text()
                tDict[key] = value
                item = r0.child(row, 0)
                if r1 and item.hasChildren():
                    for rowi in range(item.rowCount()):
                        key   = item.child(rowi, 0).text()
                        value = item.child(rowi, 2).text()
                        tDict[key] = value

        return tDict
        
    def lookupItemsValue(self, root, lCol, lTxt, vCol):
        if root is not None:
            parent = root
            for row in range(parent.rowCount()):
                child = parent.child(row, lCol)
                if child.text() == lTxt: 
                    child2 = parent.child(row, vCol)
                    return child2.text()
        return None
        
    def iterItemsChecked(self, root):
        if root is not None:
            parent = root
            for row in range(parent.rowCount()):
                child = parent.child(row, 0)
                if child.checkState() == Qt.Checked : yield child

    def iterItems_org(self, root):
        if root is not None:
            stack = [root]
            while stack:
                parent = stack.pop(0)
                for row in range(parent.rowCount()):
                    for column in range(parent.columnCount()):
                        child = parent.child(row, column)
                        yield child
                        if child.hasChildren():
                            stack.append(child)

    def createParmDict(self, txt, pkfield):

        pdict = {}    

        query = QSqlQuery() # First create query instance.
        query.exec(txt)

        while query.next():
            ldict = {}
            rec = query.record()
            for i in range(rec.count()): ldict[rec.fieldName(i)] = query.value(i)
            pdict[query.value(pkfield)] = ldict

        return pdict, [rec.fieldName(i) for i in range(rec.count())]

    def createTreeModels (self, modG, modD, modQ, modM, modR, pDict, fieldN, fieldP, hl):

        modG.setRowCount(0)
        modD.setRowCount(0)
        modQ.setRowCount(0)
        modM.setRowCount(0)
        modR.setRowCount(0)

        modG.setHorizontalHeaderLabels(hl)
        modD.setHorizontalHeaderLabels(hl)
        modQ.setHorizontalHeaderLabels(hl)
        modM.setHorizontalHeaderLabels(hl)
        modR.setHorizontalHeaderLabels(hl)
        
        rootG = modG.invisibleRootItem()
        rootD = modD.invisibleRootItem()
        rootQ = modQ.invisibleRootItem()
        rootM = modM.invisibleRootItem()
        rootR = modR.invisibleRootItem()


        for k, v in pDict.items():

            #logI ('**  ' + str(fieldP) + '->' + str(v[fieldP]))

            if str(v[fieldP]) == 'NULL':
                if   v[fieldN] == 'General': parent = rootG
                elif v[fieldN] == 'Data':    parent = rootD
                elif v[fieldN] == 'Queries': parent = rootQ
                elif v[fieldN] == 'Models':  parent = rootM
                elif v[fieldN] == 'Reports': parent = rootR

            else:
                parent = pDict[v[fieldP]]['_Id_']            

            row = []
            check = (v[fieldP] == 'Models' or v[fieldP] == 'Reports')
            for val in v.values():
                 qsi = QStandardItem('' if str(val)=='NULL' else str(val))
                 qsi.setCheckable(check)
                 check = False
                 row.append(qsi) 
                
            parent.appendRow(row)
#            parent.appendRow([QStandardItem('' if str(val)=='NULL' else str(val)) for val in v.values()])
            pDict[k]['_Id_'] = parent.child(parent.rowCount() - 1)

        return (modG, modD, modQ, modM, modR)

    def tvGeneralClicked(self, index):

        sd = self.dockwidget

        if index.isValid():
        
            rect = sd.tvGeneral.visualRect(index)
            pos = sd.tvGeneral.viewport().mapToGlobal(rect.bottomLeft())
            item = index.model().itemFromIndex(index)
            parent = item.parent()
            if parent:
                val = [parent.child(index.row(), col).text() for col in range(parent.columnCount())]
                dlg = QDialog()
                dlg.setWindowTitle('Set value for "{}"->"{}"'.format(val[1],val[0]))


                func = val[3].strip().upper()
    
                if func=='T': # Single line
                    input = QLineEdit()
                    input.setText(val[2])
                elif func=='P': # Multiple line           
                    input = QTextEdit()
                    input.setText(val[2])
                elif func=='R':
                    input = QDoubleSpinBox()
                    input.setValue(float(val[2]))
                elif func=='I':
                    input = QSpinBox()
                    input.setValue(int(val[2]))
                    

                if func!='G':
                    layout = QVBoxLayout()
                    buttonBox = QDialogButtonBox()
                    buttonBox.setStandardButtons(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
                    buttonBox.rejected.connect(dlg.reject)
                    buttonBox.accepted.connect(dlg.accept)
                    layout.addWidget(input)
                    layout.addWidget(buttonBox)
                    layout.setSizeConstraint(QLayout.SetFixedSize)
                    dlg.setLayout(layout)
                    dlg.setWindowFlags(dlg.windowFlags() & ~QtCore.Qt.WindowCloseButtonHint)
                    input.setMinimumWidth(int(sd.width()*0.7))
                    dlg.move(pos)
                    res = dlg.exec()
        
                    if res:
                        logI('Yes :-): ' + input.text())
                    else:
                        logI('No :-)')


# ['Create_table', 'General', 'CREATE TABLE "{Result_schema}"."{tablename_ts}" AS {sqlquery}', 'T', '', '', '', '', 'SQL template for creating result tables', '10', '1']